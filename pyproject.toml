[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "zerolib"
version = "0.1.0.dev"
description = "A Python library"
dependencies = [
  "aiofiles",
  "anyio",
  "appdirs",
  "atools",
  "contextvars-extras",
  "deepmerge",
  "loguru",
  "msgspec",
  "msgpack",
  "pyyaml",
  "rustworkx[mpl]",
  "wrapt",
]
requires-python = ">= 3.11"

[project.optional-dependencies]
dev = [
  "flit",
  "mypy",
  "pdbpp",
  "ptpython",
  "pytest-cov",
  "pytest-random-order",
  "pytest-sugar",
  "types-aiofiles",
  "types-appdirs",
  "types-pyyaml",
  "vulture",
]
test = [
  "pytest-asyncio",
  "typeguard",
]

[tool.coverage.run]
branch = true
data_file = "tests/.coverage"
parallel = true
source = ["."]
omit = [".pyproject/*", ".site/sitecustomize.py", "tests/whitelist.py"]
relative_files = true

[tool.coverage.report]
exclude_lines = [
  "if TYPE_CHECKING:",
  "pragma: no cover",
  "@overload",
]
fail_under = 100

[tool.coverage.html]
directory = "tests/coverage-html"
show_contexts = true

[tool.coverage.xml]
output = "tests/coverage.xml"

[tool.mypy]
# https://mypy.readthedocs.io/en/stable/config_file.html
mypy_path = "$MYPY_CONFIG_FILE_DIR/.stubs"
exclude = [
  '^/nix/store/.*',
  '^\.result.*',
  '^result.*',
  '^\.stubs/.*',
]
strict = true
# left to ruff
disable_error_code = "name-defined,syntax"
warn_unreachable = true
cache_fine_grained = true

[tool.pytest.ini_options]
addopts = """
  --showlocals
  --tb=short
"""
asyncio_mode = "auto"
cache_dir = "tests/.cache"
junit_logging = "all"
junit_log_passing_tests = true
tmp_path_retention_policy = "failed"
typeguard-packages = "zerolib"
typeguard-forward-ref-policy = "ERROR"
typeguard-collection-check-strategy = "ALL_ITEMS"

[tool.ruff]
extend-exclude = [".result*", ".pyproject*", "result*"]
force-exclude = true
output-format = "full"
show-fixes = true

[tool.ruff.lint]
ignore = [
  # pydocstyle
  "D",
  # pylint
  "PL",
  # todo
  "FIX",
  "TD",
  # shadowing a python builtin
  "A002",
  # Missing type annotation for `self` in method
  "ANN101",
  # Missing type annotation for `cls` in classmethod
  "ANN102",
  # Dynamically typed expressions (typing.Any) are disallowed
  "ANN401",
  # Do not catch blind exception: `Exception
  "BLE001",
  # unnecessary dict call
  "C408",
  # Trailing comma missing
  "COM812",
  # commented-out code - selected in pre-commit
  "ERA001",
  # Exception must not use an f-string literal
  "EM102",
  # Logging statement uses f-string
  "G004",
  # implicitly concatenated strings - selected in pre-commit
  "ISC001",
  # Private member accessed
  "SLF001",
  # Relative imports from parent modules are banned
  "TID252",
  # Move application import into a type-checking block
  "TCH001",
  # Move third-party import into a type-checking block
  "TCH002",
  # Move standard library import into a type-checking block
  "TCH003",
  # Avoid specifying long messages outside the exception class
  "TRY003",
]
select = ["ALL"]
task-tags = ["FIXME", "HACK", "TODO", "TOGO", "XXX"]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false
fixture-parentheses = false

[tool.ruff.lint.isort]
combine-as-imports = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
# use of assert
"tests/*" = ["S101"]

[tool.vulture]
exclude = [".pyproject/", ".result*/", "result*/"]

[tool.yamlfix]
explicit_start = false
line_length = 100
sequence_style = "keep_style"
section_whitelines = 1
